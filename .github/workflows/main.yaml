name: main

on:
  push:
    branches:
      - main

jobs:
  build-backend:
    name: build backend
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_BACKEND }}:latest

  build-frontend:
    name: build frontend
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_FRONTEND }}:latest

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs:
      - build-push-backend
      - build-push-frontend
    steps:
      - name: Execute remote ssh commands to deploy
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_BACKEND }}:latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_FRONTEND }}:latest
            if [ -d ~/apps/${{ secrets.GIT_PROJECT_NAME }}/ ];
              then
                cd apps/${{ secrets.GIT_PROJECT_NAME }}/ &&
                cd infra/ &&
                sudo docker-compose stop &&
                cd ../
                if [ -f backend/.env ];
                  then
                    rm backend/.env;
                fi &&
                git pull;
              else
                cd apps/ &&
                git clone git@github.com:${{ secrets.GIT_USERNAME }}/${{ secrets.GIT_PROJECT_NAME }}.git &&
                cd ${{ secrets.GIT_PROJECT_NAME }}/;
            fi
            cd backend/
            touch .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo DEBUG=${{ secrets.DEBUG }} >> .env
            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            echo LANGUAGE_CODE=${{ secrets.LANGUAGE_CODE }} >> .env
            echo TIME_ZONE=${{ secrets.TIME_ZONE }} >> .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            cd ../infra/
            sudo docker-compose up -d &&
            sudo docker-compose exec -T backend bash -c "
              python manage.py migrate --noinput &&
              python manage.py collectstatic --noinput &&
              exit
            "
            cd ~
