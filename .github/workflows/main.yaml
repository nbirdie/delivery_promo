name: main

on:
  push:
    branches:
      - main

jobs:
  build-backend:
    name: build backend
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_BACKEND }}:latest

  build-frontend:
    name: build frontend
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_FRONTEND }}:latest

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs:
      - build-backend
      - build-frontend
    steps:
      - name: Execute remote ssh commands to deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd ~ &&
            sudo docker pull ${{ DOCKERHUB_USERNAME }}/${{ DOCKER_IMAGE_BACKEND }}:latest &&
            sudo docker pull ${{ DOCKERHUB_USERNAME }}/${{ DOCKER_IMAGE_FRONTEND }}:latest &&
            if [ -d ./apps/${{ GIT_PROJECT_NAME }}/ ]; then
              cd ./apps/${{ GIT_PROJECT_NAME }}/ &&
              sh ./infra/bin/scripts.sh stop_app &&
              git pull
            else
              cd ./apps/ &&
              git clone https://github.com/${{ GIT_USERNAME }}/${{ GIT_PROJECT_NAME }}.git &&
              cd ./${{ GIT_PROJECT_NAME }}/
            fi &&
            unset DJANGO_SECRET_KEY &&
            unset DJANGO_DEBUG &&
            unset DJANGO_TIME_ZONE &&
            unset DJANGO_APP_TITLE &&
            unset POSTGRES_ENGINE &&
            unset POSTGRES_NAME &&
            unset POSTGRES_USER &&
            unset POSTGRES_PASSWORD &&
            unset POSTGRES_HOST &&
            unset POSTGRES_PORT &&
            export DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" &&
            export DJANGO_DEBUG="${{ DJANGO_DEBUG }}" &&
            export DJANGO_TIME_ZONE="${{ DJANGO_TIME_ZONE }}" &&
            export DJANGO_APP_TITLE="${{ DJANGO_APP_TITLE }}" &&
            export POSTGRES_ENGINE="${{ POSTGRES_ENGINE }}" &&
            export POSTGRES_NAME="${{ POSTGRES_NAME }}" &&
            export POSTGRES_USER="${{ POSTGRES_USER }}" &&
            export POSTGRES_PASSWORD="${{ POSTGRES_PASSWORD }}" &&
            export POSTGRES_HOST="${{ POSTGRES_HOST }}" &&
            export POSTGRES_PORT="${{ POSTGRES_PORT }}" &&
            sh ./infra/bin/scripts.sh setup_app &&
            cd ~

  # deploy:
  #   name: deploy
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build-backend
  #     - build-frontend
  #   steps:
  #     - name: Execute remote ssh commands to deploy
  #       uses: appleboy/ssh-action@v0.1.10
  #       env:
  #         SERVER_USER: ${{ secrets.SERVER_USER }}
  #         SERVER_HOST: ${{ secrets.SERVER_HOST }}
  #         SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
  #         DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  #         DOCKER_IMAGE_BACKEND: ${{ secrets.DOCKER_IMAGE_BACKEND }}
  #         DOCKER_IMAGE_FRONTEND: ${{ secrets.DOCKER_IMAGE_FRONTEND }}
  #         GIT_PROJECT_NAME: ${{ secrets.GIT_PROJECT_NAME }}
  #         GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
  #         DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  #         DJANGO_DEBUG: ${{ secrets.DJANGO_DEBUG }}
  #         DJANGO_TIME_ZONE: ${{ secrets.DJANGO_TIME_ZONE }}
  #         DJANGO_APP_TITLE: ${{ secrets.DJANGO_APP_TITLE }}
  #         POSTGRES_ENGINE: ${{ secrets.POSTGRES_ENGINE }}
  #         POSTGRES_NAME: ${{ secrets.POSTGRES_NAME }}
  #         POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  #         POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  #         POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
  #         POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
  #       with:
  #         host: ${{ secrets.SERVER_HOST }}
  #         username: ${{ secrets.SERVER_USER }}
  #         password: ${{ secrets.SERVER_PASSWORD }}
  #         script: |
  #           cd ~ &&
  #           sudo docker pull $DOCKERHUB_USERNAME/$DOCKER_IMAGE_BACKEND:latest &&
  #           sudo docker pull $DOCKERHUB_USERNAME/$DOCKER_IMAGE_FRONTEND:latest &&
  #           if [ -d ./apps/$GIT_PROJECT_NAME/ ]; then
  #             cd ./apps/$GIT_PROJECT_NAME/ &&
  #             sh ./infra/bin/scripts.sh stop_app &&
  #             git pull
  #           else
  #             cd ./apps/ &&
  #             git clone https://github.com/$GIT_USERNAME/$GIT_PROJECT_NAME.git &&
  #             cd ./$GIT_PROJECT_NAME/
  #           fi &&
  #           unset DJANGO_SECRET_KEY &&
  #           unset DJANGO_DEBUG &&
  #           unset DJANGO_TIME_ZONE &&
  #           unset DJANGO_APP_TITLE &&
  #           unset POSTGRES_ENGINE &&
  #           unset POSTGRES_NAME &&
  #           unset POSTGRES_USER &&
  #           unset POSTGRES_PASSWORD &&
  #           unset POSTGRES_HOST &&
  #           unset POSTGRES_PORT &&
  #           export DJANGO_SECRET_KEY="$DJANGO_SECRET_KEY" &&
  #           export DJANGO_DEBUG="$DJANGO_DEBUG" &&
  #           export DJANGO_TIME_ZONE="$DJANGO_TIME_ZONE" &&
  #           export DJANGO_APP_TITLE="$DJANGO_APP_TITLE" &&
  #           export POSTGRES_ENGINE="$POSTGRES_ENGINE" &&
  #           export POSTGRES_NAME="$POSTGRES_NAME" &&
  #           export POSTGRES_USER="$POSTGRES_USER" &&
  #           export POSTGRES_PASSWORD="$POSTGRES_PASSWORD" &&
  #           export POSTGRES_HOST="$POSTGRES_HOST" &&
  #           export POSTGRES_PORT="$POSTGRES_PORT" &&
  #           sh ./infra/bin/scripts.sh setup_app &&
  #           cd


  # deploy:
  #   name: deploy
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build-backend
  #     - build-frontend
  #   steps:
  #     - name: Install sshpass
  #       run: sudo apt-get install -y sshpass
  #     - name: Execute remote SSH commands to deploy
  #       env:
  #         SERVER_USER: ${{ secrets.SERVER_USER }}
  #         SERVER_HOST: ${{ secrets.SERVER_HOST }}
  #         SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
  #         DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  #         DOCKER_IMAGE_BACKEND: ${{ secrets.DOCKER_IMAGE_BACKEND }}
  #         DOCKER_IMAGE_FRONTEND: ${{ secrets.DOCKER_IMAGE_FRONTEND }}
  #         GIT_PROJECT_NAME: ${{ secrets.GIT_PROJECT_NAME }}
  #         GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
  #         DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  #         DJANGO_DEBUG: ${{ secrets.DJANGO_DEBUG }}
  #         DJANGO_TIME_ZONE: ${{ secrets.DJANGO_TIME_ZONE }}
  #         DJANGO_APP_TITLE: ${{ secrets.DJANGO_APP_TITLE }}
  #         POSTGRES_ENGINE: ${{ secrets.POSTGRES_ENGINE }}
  #         POSTGRES_NAME: ${{ secrets.POSTGRES_NAME }}
  #         POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  #         POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  #         POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
  #         POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
  #       run: |
  #         sshpass -p $SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST '
  #         cd ~ &&
  #         sudo docker pull $DOCKERHUB_USERNAME/$DOCKER_IMAGE_BACKEND:latest &&
  #         sudo docker pull $DOCKERHUB_USERNAME/$DOCKER_IMAGE_FRONTEND:latest &&
  #         if [ -d ./apps/$GIT_PROJECT_NAME/ ]; then
  #           cd ./apps/$GIT_PROJECT_NAME/ &&
  #           sh ./infra/bin/scripts.sh stop_app &&
  #           git pull
  #         else
  #           cd ./apps/ &&
  #           git clone https://github.com/$GIT_USERNAME/$GIT_PROJECT_NAME.git &&
  #           cd ./$GIT_PROJECT_NAME/
  #         fi &&
  #         unset DJANGO_SECRET_KEY &&
  #         unset DJANGO_DEBUG &&
  #         unset DJANGO_TIME_ZONE &&
  #         unset DJANGO_APP_TITLE &&
  #         unset POSTGRES_ENGINE &&
  #         unset POSTGRES_NAME &&
  #         unset POSTGRES_USER &&
  #         unset POSTGRES_PASSWORD &&
  #         unset POSTGRES_HOST &&
  #         unset POSTGRES_PORT &&
  #         export DJANGO_SECRET_KEY="$DJANGO_SECRET_KEY" &&
  #         export DJANGO_DEBUG="$DJANGO_DEBUG" &&
  #         export DJANGO_TIME_ZONE="$DJANGO_TIME_ZONE" &&
  #         export DJANGO_APP_TITLE="$DJANGO_APP_TITLE" &&
  #         export POSTGRES_ENGINE="$POSTGRES_ENGINE" &&
  #         export POSTGRES_NAME="$POSTGRES_NAME" &&
  #         export POSTGRES_USER="$POSTGRES_USER" &&
  #         export POSTGRES_PASSWORD="$POSTGRES_PASSWORD" &&
  #         export POSTGRES_HOST="$POSTGRES_HOST" &&
  #         export POSTGRES_PORT="$POSTGRES_PORT" &&
  #         sh ./infra/bin/scripts.sh setup_app &&
  #         cd ~
  #         '
