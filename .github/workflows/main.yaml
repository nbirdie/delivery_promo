name: main

on:
  push:
    branches:
      - main

jobs:
  build-backend:
    name: build backend
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_BACKEND }}:latest

  build-frontend:
    name: build frontend
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_FRONTEND }}:latest

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs:
      - build-backend
      - build-frontend
    steps:
      - name: Execute remote ssh commands to deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd ~

            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_BACKEND }}:latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_FRONTEND }}:latest

            if [ -d ./apps/${{ secrets.GIT_PROJECT_NAME }}/ ]; then
              cd ./apps/${{ secrets.GIT_PROJECT_NAME }}/
              sh ./infra/bin/scripts.sh stop_app
              git pull
            else
              cd ./apps/
              git clone https://github.com/${{ secrets.GIT_USERNAME }}/${{ secrets.GIT_PROJECT_NAME }}.git
              cd ./${{ secrets.GIT_PROJECT_NAME }}/
            fi

            unset DJANGO_SECRET_KEY
            unset DJANGO_SECRET_KEY
            unset DJANGO_DEBUG
            unset DJANGO_TIME_ZONE
            unset DJANGO_APP_TITLE
            unset POSTGRES_ENGINE
            unset POSTGRES_NAME
            unset POSTGRES_USER
            unset POSTGRES_PASSWORD
            unset POSTGRES_HOST
            unset POSTGRES_PORT

            export DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}"
            export DJANGO_DEBUG="${{ secrets.DJANGO_DEBUG }}"
            export DJANGO_TIME_ZONE="${{ secrets.DJANGO_TIME_ZONE }}"
            export DJANGO_APP_TITLE="${{ secrets.DJANGO_APP_TITLE }}"
            export POSTGRES_ENGINE="${{ secrets.POSTGRES_ENGINE }}"
            export POSTGRES_NAME="${{ secrets.POSTGRES_NAME }}"
            export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
            export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
            export POSTGRES_HOST="${{ secrets.POSTGRES_HOST }}"
            export POSTGRES_PORT="${{ secrets.POSTGRES_PORT }}"

            sh ./infra/bin/scripts.sh setup_app

            cd ~
